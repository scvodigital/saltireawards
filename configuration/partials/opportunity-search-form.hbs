{{#withExtend this
  hasLocation=(ifAll
    @root.request.params.query.lat
    @root.request.params.query.lng
    @root.request.params.query.distance
  )
  location=(if
    @root.request.params.query.lat
    (default
      @root.request.params.query.location
      (concat @root.request.params.query.lat ", " @root.request.params.query.lng)
    )
    else=""
  )}}
<div class="search-form">
  <form id="search-view" class="search-form" action="{{@root.request.url.pathname}}" method="GET">
    <input type="hidden" name="lat" value="{{@root.request.params.query.lat}}" id="location-lat" />
    <input type="hidden" name="lng" value="{{@root.request.params.query.lng}}" id="location-lng" />
    <input type="hidden" name="sort" value="{{@root.request.params.query.sort}}" id="default-sort" />
    <div class="b-padding">
      <div class="columns">
        <div class="column col-7 col-xl-6 col-md-12 keywords">
          <div class="form-group full-width">
            <div data-component="Typeahead" data-Typeahead="typeahead-terms">
              <input type="text" id="what-opportunities" name="keywords" class="form-input input-lg" value="{{@root.request.params.query.keywords}}" placeholder="Search for volunteering opportunities" autocomplete="off" data-lpignore="true">
            </div>
          </div>
        </div>
        <div class="column col-3 col-xl-4 col-md-8 filter-age">
          <div class="form-group">
            <select class="form-select select-lg" id="age" name="age">
              {{#each (split "12,13,14,15,16,17,18" ",")}}
                <option value="{{this}}" {{#compare (default @root.request.params.query.age '18') this}}selected{{/compare}}>Available for age {{this}}+</option>
              {{/each}}
            </select>
          </div>
        </div>
        <div class="column col-ml-auto col-2 col-md-4">
          <button type="submit" id="search-opportunities" class="btn btn-primary btn-lg">
            Search
            <!-- <span class="far fa-search" aria-hidden="true"></span> -->
          </button>
        </div>
      </div>
      <div class="columns t-margin-full">
        <div class="column col-5 {{#unless hasLocation}}hidden{{/unless}}" id="location-fields">
          <div class="input-group has-icon-left">
            <span class="form-icon far fa-times geo-lookup" tabindex="0" title="Find my location" data-component="TasksTrigger" data-TasksTrigger="empty-location-fields"></span>
            <input type="text" id="where-opportunities" name="location" class="form-input input-lg" value="{{location}}" placeholder="Location" data-lpignore="true" readonly>
            <select class="form-select select-lg" id="distance" name="distance">
              {{#each (split "5,10,15,20,25,30,35,40,45,50" ",")}}
                <option value="{{this}}" {{#compare (default @root.request.params.query.distance "10") "===" this}}selected{{/compare}}>{{this}} miles</option>
              {{/each}}
            </select>
          </div>
        </div>
        <div class="column col-9 chips">
          {{#each @root.context.metaData.volunteeringTerms}}
            <div class="chip-set chip-filters" id="{{key}}-filters">
              {{~#each (arrayify (getProperty @root.request.params.query key))~}}
                {{~#if this~}}
                  <span>
                    <div class="chip" tabindex="0">
                      <span class="chip__text">
                        {{#each ../termGroups}}
                          {{#each terms}}
                            {{#compare key ../../this}}
                              {{label}}
                            {{/compare}}
                          {{/each}}
                        {{/each}}
                      </span>
                      <input type="hidden" name="{{../key}}[]" value="{{this}}">
                      <i class="chip__icon--trailing far fa-times-circle" tabindex="0" role="button" data-component="TasksTrigger" data-TasksTrigger="delete-chip"></i>
                    </div>
                  </span>
                {{~/if~}}
              {{~/each~}}
            </div>
          {{/each}}
        </div>
      </div>
    </div>
  </form>
</div>

{{{{raw}}}}
<script data-task="geolocation" type="javascript/blocked">
  {
    type: "multiTask",
    config: {
      __doNotCompile: true,
      tasks: [
        { name: "geolocation", type: "geolocation", config: {} },
        {
          type: "switch",
          config: {
            which: { __template: "{{~#if errors.geolocation~}}error{{~else~}}{{~#unless data.geolocation.coords~}}notFound{{~/unless~}}{{~/if~}}" },
            branches: {
              notFound: {
                halt: true,
                tasks: [
                  {
                    type: "run",
                    config: { "config": "console.log(`Geolocation not found`)" }
                  },
                  "empty-location-fields"
                ]
              },
              error: {
                halt: true,
                tasks: [
                  {
                    type: "run",
                    config: { "config": "console.log(`Geolocation error, probably denied access`, errors)" }
                  },
                  "empty-location-fields"
                ]
              }
            }
          }
        },
        {
          name: "storingRawCoords",
          type: "elementManipulator",
          config: {
            "#location-lat": { value: { __template: "{{data.geolocation.coords.latitude}}" } },
            "#location-lng": { value: { __template: "{{data.geolocation.coords.longitude}}" } },
            "#where-opportunities": { value: { __template: "{{data.geolocation.coords.latitude}}, {{data.geolocation.coords.longitude}}" } },
            "#location-fields": { removeClass: "hidden" }
          }
        },
        {
          name: "place",
          type: "request",
          config: {
            url: {
              __template: "/place-lookup?lat={{data.geolocation.coords.latitude}}&lng={{data.geolocation.coords.longitude}}"
            }
          }
        },
        {
          type: "switch",
          config: {
            which: {
              __template: "{{#if errors.place}}requestError{{else}}{{#if data.place.error}}lookupError{{/if}}{{/if}}"
            },
            branches: {
              requestError: {
                tasks: [
                  {
                    type: "run",
                    config: { "config": "console.log(`Problem executing request`, data, errors)" }
                  },
                  "empty-location-fields"
                ]
              },
              lookupError: {
                tasks: [
                  {
                    type: "run",
                    config: { "config": "console.log(`Problem getting place name`, data, errors)" }
                  },
                  "empty-location-fields"
                ]
              },
              default: {
                tasks: [
                  {
                    type: "elementManipulator",
                    config: {
                      "#where-opportunities": { value: { __template: "{{data.place.place}}" } }
                    }
                  }
                ]
              }
            }
          }
        }
      ]
    }
  }
</script>

<script data-component-config="empty-location-fields" type="javascript/blocked">
  {
    click: {
      tasks: [
        {
          name: "emptyLocationFields",
          type: "elementManipulator",
          config: {
            "#location-fields": { addClass: "hidden" },
            "#location-lat": { value: "" },
            "#location-lng": { value: "" },
            "#where-opportunities": { value: "" }
          }
        }
      ]
    }
  }
</script>

<script data-component-config="delete-chip" type="javascript/blocked">
  {
    click: {
      tasks: [
        {
          type: "elementManipulator",
          config: { "<span": { delete: true } }
        }
      ]
    }
  }
</script>
{{{{/raw}}}}

<script data-component-config="typeahead-terms" type="javascript/blocked">
{
  typeaheadOptions: {
    highlight: true,
    minlength: 1
  },
  itemSelectedTasks: [
    {
      type: "basic",
      name: "exists",
      config: {
        __template: `\{{{get (jquery (concat "input[type='hidden'][value='" metadata.suggestion.value "']")) "length"}}}`,
        __parser: 'integer'
      }
    },
    {
      type: "run",
      config: {
        code: `console.log('DATA:', data)`
      }
    },
    {
      __doNotCompile: true,
      type: "switch",
      config: {
        which: {
          __template: `
            \{{~#unless data.exists~}}
              \{{~#switch metadata.suggestion.datasetName "geo_lookup"~}}
                \{{~#case "geo_lookup"~}}
                  geo_lookup
                \{{~/case~}}
                \{{~#case "geo_services"~}}
                  geo_services
                \{{~/case~}}
              \{{~else~}}
                other
              \{{~/switch~}}
            \{{~/unless~}}
          `
        },
        branches: {
          geo_lookup: {
            tasks: [
              {
                __doNotCompile: true,
                type: "elementManipulator",
                config: {
                  "#location-fields": { removeClass: "hidden" },
                  "#location-lat": { value: { __pointer: "metadata.suggestion.point.lat" } },
                  "#location-lng": { value: { __pointer: "metadata.suggestion.point.lon" } },
                  "#where-opportunities": { value: { __pointer: "metadata.suggestion.display" } }
                }
              },
            ]
          },
          geo_services: {
            tasks: [ "geolocation" ]
          },
          other: {
            tasks: [
              {
                type: "elementManipulator",
                config: {
                  "#\{{metadata.suggestion.datasetName}}-filters": {
                    createElement: {
                      html: {
                        __template: `
                          <span>
                            <div class="chip" tabindex="0">
                              <span class="chip__text">\{{metadata.suggestion.label}}</span>
                              <input type="hidden" name="\{{metadata.suggestion.datasetName}}[]" value="\{{metadata.suggestion.value}}">
                              <i class="chip__icon--trailing far fa-times-circle" tabindex="0" role="button" data-component="TasksTrigger" data-TasksTrigger="delete-chip"></i>
                            </div>
                          </span>
                        `
                      }
                    }
                  }
                }
              }
            ]
          },
          default: { tasks: [] },
        }
      }
    },
    {
      type: "elementManipulator",
      config: {
        ">.tt-menu": { styles: { display: "none !important" } },
        "#what-opportunities": { value: "", focus: true, }
      }
    },
    "update-components"
  ],
  datasets: [
    {
      name: "geo_services",
      display: "label",
      templates: {
        header: "<h3>Near me</h3>"
      },
      bloodhound: {
        datumTokenizer: "objWhitespace",
        datumTokenizerField: "other",
        queryTokenizer: "whitespace",
        local: [
          {
            label: "Use my current location",
            value: "near-me",
            other: "local near me here"
          }
        ]
      }
    },
    {{#each @root.context.metaData.volunteeringTerms}}
      {{#each termGroups}}
        {
          name: {{{stringify ../key}}},
          display: "label",
          templates: {
            {{#compare (length ../termGroups) 1}}
              header: "<h3>{{{../label}}}</h3>"
            {{else}}
              header: "<h3>{{{../label}}} &gt; {{{label}}}</h3>"
            {{/compare}}
          },
          bloodhound: {
            datumTokenizer: "objWhitespace",
            datumTokenizerField: "other",
            queryTokenizer: "whitespace",
            local: [
              {{#each terms}}
                {
                  label: {{{stringify label}}},
                  value: {{{stringify key}}},
                  other: {{{stringify (concat ../key ' ' textBag)}}}
                },
              {{/each}}
            ]
          }
        },
      {{/each}}
    {{/each}}
    {
      name: "geo_lookup",
      display: "display",
      templates: {
        header: "<h3>Location</h3>"
      },
      bloodhound: {
        datumTokenizer: "objWhitespace",
        datumTokenizerField: "place",
        queryTokenizer: "whitespace",
        remote: {
          url: "/geo-lookup?q=*",
          wildcard: "*"
        }
      }
    },
  ],
  clearIfNothingSelected: true
}
</script>
{{/withExtend}}